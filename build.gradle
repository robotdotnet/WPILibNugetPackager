plugins {
  id 'cpp'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2025.0'
  id 'edu.wpi.first.NativeUtils' version '2025.10.1'
}

wpilibRepositories.use2027Repos()
if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

nativeUtils.addWpiNativeUtils()

nativeUtils {
    wpi {
        configureDependencies {
            wpiVersion = "2025.+"
            opencvYear = "frc2025"
            opencvVersion = "4.10.0-3"
        }
    }
}

def supportedPlatforms = [
  "windowsx86-64",
  "windowsarm64",
  "osxuniversal",
  "linuxx86-64",
  "linuxarm64",
  "linuxsystemcore",
]

// Register all platforms
model {
  platforms {
    supportedPlatforms.each {
      "$it"(NativePlatform) {

      }
    }
  }
}

nativeUtils {
  nativeDependencyContainer {
    cscorecvstatic(getNativeDependencyTypeClass('WPISharedMavenDependency')) {
      version = "2025.+"
      groupId = "edu.wpi.first.cscore"
      artifactId = "cscore-jnicvstatic"
      ext = "zip"

      headerClassifier = "headers"
      targetPlatforms = [
        "windowsx86-64",
        "windowsarm64",
        "linuxarm64",
        "linuxx86-64",
        "linuxsystemcore",
        "osxuniversal"
      ]
    }
  }
}

def platformMap = [
  "windowsx86-64": "win-x64",
  "windowsarm64": "win-arm64",
  "osxarm64": "osx-arm64",
  "osxx86-64": "osx-x64",
  "linuxx86-64": "linux-x64",
  "linuxarm64": "linux-arm64",
  "linuxsystemcore": "linux-arm64", // This is a special case, we handle it separately
]

def sets = [
  wpiutil: "wpiutil_shared",
  hal: "hal_shared",
  wpinet: "wpinet_shared",
  ntcore: "ntcore_shared",
  cscore: "cscore_shared",
  datalog: "datalog_shared"
]

void generateFile(String name, String nativeName, String version, Map<String, ArrayList> platformFiles) {
  // Make tmp folder
  def packFolder = file("build/nugettmp/$name")
  delete(packFolder)
  packFolder.mkdirs()

  copy {
    from file("nugettmp.csproj")
    from file("wpilib-128.png")
    into packFolder
  }

  for (def o : platformFiles) {
    def outputFolder = file("${packFolder}/runtimes/${o.key}/native")
    outputFolder.mkdirs()

    copy {
      into outputFolder
      from o.value
    }
  }

  exec {
    executable = "dotnet"
    args "pack"
    args packFolder
    args "/p:LibraryName=${name}"
    args "/p:NativeLibraryName=${nativeName}"
    args "/p:Version=${version}"
    args "-o"
    args file("build/nugetpackages")
  }
}

def nameMap = [
  wpiutil: "WPIUtil",
  hal: "WPIHal",
  wpinet: "WPINet",
  ntcore: "NetworkTables",
  cscore: "CsCore",
  datalog: "DataLog",
]

def nativeNameMap = [
  wpiutil: "wpiutil",
  hal: "wpiHal",
  wpinet: "wpinet",
  ntcore: "ntcore",
  cscore: "cscore",
  datalog: "datalog",
]

task createPackages() {
  doLast {
    delete(file("build/nugetpackages"))

    def version = null

    sets.each { set -> {
      nativeUtils.nativeDependencyContainer.getByName(set.value, libset -> {
        def releaseBuildType = nativeUtils.buildTypes.named('release').get()
        def map = [:]

        for (targetPlatform in nativeUtils.platforms) {
          if (targetPlatform.name == "linuxsystemcore") {
            // Skip linuxsystemcore, we handle it separately
            continue
          }
          def resolved = libset.resolveNativeDependency(targetPlatform, releaseBuildType, java.util.Optional.empty()).get()

          def artifactVersion = libset.getViewForArtifact(targetPlatform.name, "RUNTIME", java.util.Optional.empty()).artifacts.first().id.componentIdentifier.version
          if (version == null) {
            version = artifactVersion
          } else if (version != artifactVersion) {
            throw new GradleException("Versions do not match")
          }

          def libs = []

          resolved.getRuntimeFiles().forEach({ f ->
            if (!f.name.contains('jni')) {
              libs += f
            }
          })

          def platform = targetPlatform.name

          // Run it twice for osx
          if (targetPlatform.name == "osxuniversal") {
            platform = "osxarm64"
            map.put(platformMap['osxx86-64'], libs)
          }

          map.put(platformMap[platform], libs)
        }

        generateFile(nameMap[set.key], nativeNameMap[set.key], version, map)

        // Generate a custom systemcore image
        def systemcoreMap = [:];
        {
          def targetPlatform = nativeUtils.platforms.named('linuxsystemcore').get()
          def resolved = libset.resolveNativeDependency(targetPlatform, releaseBuildType, java.util.Optional.empty()).get()

          def artifactVersion = libset.getViewForArtifact(targetPlatform.name, "RUNTIME", java.util.Optional.empty()).artifacts.first().id.componentIdentifier.version
          if (version == null) {
            version = artifactVersion
          } else if (version != artifactVersion) {
            throw new GradleException("Versions do not match")
          }

          def libs = []

          resolved.getRuntimeFiles().forEach({ f ->
            if (!f.name.contains('jni')) {
              libs += f
            }
          })

          def platform = targetPlatform.name

          systemcoreMap.put(platformMap[platform], libs)
          generateFile(nameMap[set.key] + ".SystemCore", nativeNameMap[set.key], version, systemcoreMap)
        }
      })
    }}

    def joinedFiles = String.join('","', nameMap.values())

    file("build/nugetpackages").mkdirs()
    def pushFile = file("build/nugetpackages/pushartifacts.ps1")
    pushFile.text = """
param (
    [Parameter(Mandatory = \$true)]
    [string]\$ApiKey
)

Set-StrictMode -Version 'Latest'
\$PSDefaultParameterValues['*:ErrorAction'] = 'Stop'

\$Artifacts = "$joinedFiles"
\$Version = "$version"
\$DeployRoot = "https://wpilib.jfrog.io/artifactory/api/nuget/wpilib-nuget-development-local"

foreach (\$Artifact in \$Artifacts) {
    \$FilePath = (Join-Path \$PSScriptRoot "FRC.\$Artifact.runtime.\$Version.nupkg")
    \$DeployUrl = "\$DeployRoot/FRC.\$Artifact.runtime/\$Version"
    dotnet nuget push \$FilePath -s \$DeployUrl -k \$ApiKey

    \$FilePath = (Join-Path \$PSScriptRoot "FRC.\$Artifact.SystemCore.runtime.\$Version.nupkg")
    \$DeployUrl = "\$DeployRoot/FRC.\$Artifact.SystemCore.runtime/\$Version"
    dotnet nuget push \$FilePath -s \$DeployUrl -k \$ApiKey
}
"""
  }
}

wrapper {
  gradleVersion '8.11'
}
